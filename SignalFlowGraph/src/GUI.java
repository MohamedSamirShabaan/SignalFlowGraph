import java.awt.BasicStroke;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Paint;
import java.awt.Stroke;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.Iterator;

import javax.swing.DefaultListModel;
import javax.swing.JEditorPane;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;

import org.apache.commons.collections15.Transformer;

import edu.uci.ics.jung.algorithms.layout.Layout;
import edu.uci.ics.jung.algorithms.layout.StaticLayout;
import edu.uci.ics.jung.graph.DirectedSparseGraph;
import edu.uci.ics.jung.visualization.VisualizationViewer;
import edu.uci.ics.jung.visualization.control.EditingModalGraphMouse;
import edu.uci.ics.jung.visualization.control.ModalGraphMouse;
import edu.uci.ics.jung.visualization.decorators.ToStringLabeller;

public class GUI extends JFrame {

	/**
	 * 
	 */
	private static final long serialVersionUID = -2175636648429766928L;
	// Variables declaration
	@SuppressWarnings("rawtypes")
	private javax.swing.JList jList_forwardPaths;
	private javax.swing.JPanel jPanel_forwardPaths;
	private javax.swing.JTabbedPane jTappedPane_loops;
	private javax.swing.JLabel jLabel_tansferFunction;
	private javax.swing.JPanel jPanel_tansferFunction;
	private javax.swing.JButton evaluateBtn;
	private javax.swing.JLabel jLabel_transferFun;
	private javax.swing.JLabel jLabel_pathGain;
	private javax.swing.JLabel jLabel_pathDelta;
	private javax.swing.JLabel jlabel_mainDelta;
	private javax.swing.JLabel jLabel_forwardPaths;
	private javax.swing.JMenu jMenu_file;
	private javax.swing.JMenu jMenu_edit;
	private javax.swing.JMenuBar jMenuBar1;
	private javax.swing.JPanel jPanel1;
	private javax.swing.JPanel jPanel2;
	private javax.swing.JPanel jPanel4;
	private javax.swing.JScrollPane jScrollPane5;
	private javax.swing.JSeparator jSeparator2;
	private javax.swing.JSeparator jSeparator3;
	private javax.swing.JSeparator jSeparator4;
	private javax.swing.JSeparator jSeparator6;
	private javax.swing.JLabel mainDelta;
	private javax.swing.JTabbedPane mainTabbedPane;
	private javax.swing.JLabel pathDelta;
	private javax.swing.JLabel pathGain;
	private int startNode = -1, endNode = -1;
	/**
	 * Creates new form GUI
	 */
	private DirectedSparseGraph<GraphElements.MyVertex, GraphElements.MyEdge> directedGraph;
	private VisualizationViewer<GraphElements.MyVertex, GraphElements.MyEdge> visualizationViewer;
	private Transformer<GraphElements.MyVertex, Paint> vertexColor;
	// selectedPaths
	private ArrayList<Integer> paths = new ArrayList<Integer>();
	private DefaultListModel forward;
	private Font displayFont;

	public GUI() {
		initComponents();
		setGraph();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * The content of this method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	private void initComponents() {
		java.awt.GridBagConstraints gridBagConstraints;

		// panels
		jPanel1 = new javax.swing.JPanel();
		jPanel2 = new javax.swing.JPanel();
		jPanel4 = new javax.swing.JPanel();
		jPanel_tansferFunction = new javax.swing.JPanel();
		jPanel_forwardPaths = new javax.swing.JPanel();
		// labels
		jLabel_transferFun = new javax.swing.JLabel();
		jLabel_pathDelta = new javax.swing.JLabel();
		pathDelta = new javax.swing.JLabel();
		jLabel_forwardPaths = new javax.swing.JLabel();
		jLabel_pathGain = new javax.swing.JLabel();
		pathGain = new javax.swing.JLabel();
		jlabel_mainDelta = new javax.swing.JLabel();
		mainDelta = new javax.swing.JLabel();
		jLabel_tansferFunction = new javax.swing.JLabel();
		// separators
		jSeparator2 = new javax.swing.JSeparator();
		jSeparator3 = new javax.swing.JSeparator();
		jSeparator4 = new javax.swing.JSeparator();
		jSeparator6 = new javax.swing.JSeparator();
		// scroll
		jScrollPane5 = new javax.swing.JScrollPane();
		jList_forwardPaths = new javax.swing.JList();
		// tabs
		mainTabbedPane = new javax.swing.JTabbedPane();
		jTappedPane_loops = new javax.swing.JTabbedPane();
		// button
		evaluateBtn = new javax.swing.JButton();
		// menu bar
		jMenuBar1 = new javax.swing.JMenuBar();
		// menu
		jMenu_file = new javax.swing.JMenu();
		jMenu_edit = new javax.swing.JMenu();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setTitle("Signal FLow Graph");
		setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
		getContentPane().setLayout(new java.awt.GridBagLayout());

		javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(
				jPanel2);
		jPanel2.setLayout(jPanel2Layout);
		jPanel2Layout.setHorizontalGroup(jPanel2Layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 1180,
				Short.MAX_VALUE));
		jPanel2Layout.setVerticalGroup(jPanel2Layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 360,
				Short.MAX_VALUE));

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 0;
		gridBagConstraints.ipadx = 1180;
		gridBagConstraints.ipady = 360;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
		getContentPane().add(jPanel2, gridBagConstraints);

		jPanel4.setPreferredSize(new java.awt.Dimension(1000, 245));

		mainTabbedPane.setPreferredSize(new java.awt.Dimension(1041, 230));
		mainTabbedPane.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				mainTabbedPaneMouseClicked(evt);
			}
		});
		mainTabbedPane
				.addChangeListener(new javax.swing.event.ChangeListener() {
					public void stateChanged(javax.swing.event.ChangeEvent evt) {
						mainTabbedPaneStateChanged(evt);
					}
				});

		jLabel_transferFun.setFont(new java.awt.Font("SansSerif", 1, 18));
		jLabel_transferFun.setText("Transfer Function =");

		jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);

		jlabel_mainDelta.setFont(new java.awt.Font("SansSerif", 1, 18));
		jlabel_mainDelta.setText("Main Delta =");

		mainDelta.setFont(new java.awt.Font("SansSerif", 0, 18));

		javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(
				jPanel1);
		jPanel1.setLayout(jPanel1Layout);
		jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				jPanel1Layout
						.createSequentialGroup()
						.addContainerGap()
						.addComponent(jLabel_tansferFunction)
						.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE,
								Short.MAX_VALUE)));
		jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(
				javax.swing.GroupLayout.Alignment.LEADING).addGroup(
				javax.swing.GroupLayout.Alignment.TRAILING,
				jPanel1Layout.createSequentialGroup()
						.addContainerGap(102, Short.MAX_VALUE)
						.addComponent(jLabel_tansferFunction)
						.addGap(35, 35, 35)));

		jSeparator4.setOrientation(javax.swing.SwingConstants.VERTICAL);

		javax.swing.GroupLayout jPanel_tansferFunctionLayout = new javax.swing.GroupLayout(
				jPanel_tansferFunction);
		jPanel_tansferFunction.setLayout(jPanel_tansferFunctionLayout);
		jPanel_tansferFunctionLayout
				.setHorizontalGroup(jPanel_tansferFunctionLayout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanel_tansferFunctionLayout
										.createSequentialGroup()
										.addContainerGap()
										.addGroup(
												jPanel_tansferFunctionLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING,
																false)
														.addGroup(
																jPanel_tansferFunctionLayout
																		.createSequentialGroup()
																		.addGap(63,
																				63,
																				63)
																		.addComponent(
																				jPanel1,
																				javax.swing.GroupLayout.DEFAULT_SIZE,
																				javax.swing.GroupLayout.DEFAULT_SIZE,
																				Short.MAX_VALUE))
														.addComponent(
																jLabel_transferFun))
										.addGap(92, 92, 92)
										.addComponent(
												jSeparator4,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addGroup(
												jPanel_tansferFunctionLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(
																jPanel_tansferFunctionLayout
																		.createSequentialGroup()
																		.addGap(84,
																				84,
																				84)
																		.addComponent(
																				jlabel_mainDelta))
														.addGroup(
																jPanel_tansferFunctionLayout
																		.createSequentialGroup()
																		.addGap(224,
																				224,
																				224)
																		.addComponent(
																				mainDelta)))
										.addGap(360, 360, 360)
										.addComponent(
												jSeparator3,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addContainerGap(90, Short.MAX_VALUE)));
		jPanel_tansferFunctionLayout
				.setVerticalGroup(jPanel_tansferFunctionLayout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addComponent(jSeparator4)
						.addComponent(jSeparator3)
						.addGroup(
								jPanel_tansferFunctionLayout
										.createSequentialGroup()
										.addContainerGap()
										.addGroup(
												jPanel_tansferFunctionLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(
																jPanel_tansferFunctionLayout
																		.createSequentialGroup()
																		.addComponent(
																				jLabel_transferFun)
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED)
																		.addComponent(
																				jPanel1,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				javax.swing.GroupLayout.DEFAULT_SIZE,
																				javax.swing.GroupLayout.PREFERRED_SIZE))
														.addGroup(
																jPanel_tansferFunctionLayout
																		.createSequentialGroup()
																		.addComponent(
																				jlabel_mainDelta)
																		.addGap(52,
																				52,
																				52)
																		.addComponent(
																				mainDelta)))
										.addContainerGap(50, Short.MAX_VALUE)));

		mainTabbedPane.addTab("Transfer Function", jPanel_tansferFunction);

		jLabel_forwardPaths.setFont(new java.awt.Font("SansSerif", 1, 18));
		jLabel_forwardPaths.setText("Forward Paths");

		forward = new DefaultListModel();
		displayFont = new Font("Serif", Font.ITALIC, 14);
		jList_forwardPaths.setFont(new java.awt.Font("SansSerif", 1, 14));
		jList_forwardPaths.setModel(forward);
		jList_forwardPaths
				.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
		jList_forwardPaths
				.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
					public void valueChanged(
							javax.swing.event.ListSelectionEvent evt) {
						jList_forwardPathsValueChanged(evt);
					}
				});
		jScrollPane5.setViewportView(jList_forwardPaths);

		jSeparator6.setOrientation(javax.swing.SwingConstants.VERTICAL);

		jLabel_pathGain.setFont(new java.awt.Font("SansSerif", 1, 18));
		jLabel_pathGain.setText("Path's Gain");

		pathGain.setFont(new java.awt.Font("SansSerif", 0, 18));

		jSeparator2.setOrientation(javax.swing.SwingConstants.VERTICAL);

		jLabel_pathDelta.setFont(new java.awt.Font("SansSerif", 1, 18));
		jLabel_pathDelta.setText("Path's Delta");

		pathDelta.setFont(new java.awt.Font("SansSerif", 0, 18));

		javax.swing.GroupLayout jPanel_forwardPathsLayout = new javax.swing.GroupLayout(
				jPanel_forwardPaths);
		jPanel_forwardPaths.setLayout(jPanel_forwardPathsLayout);
		jPanel_forwardPathsLayout
				.setHorizontalGroup(jPanel_forwardPathsLayout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanel_forwardPathsLayout
										.createSequentialGroup()
										.addGroup(
												jPanel_forwardPathsLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(
																jPanel_forwardPathsLayout
																		.createSequentialGroup()
																		.addGap(47,
																				47,
																				47)
																		.addComponent(
																				jLabel_forwardPaths))
														.addGroup(
																jPanel_forwardPathsLayout
																		.createSequentialGroup()
																		.addGap(34,
																				34,
																				34)
																		.addComponent(
																				jScrollPane5,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				377,
																				javax.swing.GroupLayout.PREFERRED_SIZE)))
										.addGap(29, 29, 29)
										.addComponent(
												jSeparator6,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addGap(89, 89, 89)
										.addGroup(
												jPanel_forwardPathsLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addComponent(
																jLabel_pathGain)
														.addGroup(
																jPanel_forwardPathsLayout
																		.createSequentialGroup()
																		.addGap(13,
																				13,
																				13)
																		.addComponent(
																				pathGain)))
										.addGap(96, 96, 96)
										.addComponent(
												jSeparator2,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												javax.swing.GroupLayout.DEFAULT_SIZE,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addGroup(
												jPanel_forwardPathsLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(
																jPanel_forwardPathsLayout
																		.createSequentialGroup()
																		.addGap(110,
																				110,
																				110)
																		.addComponent(
																				pathDelta)
																		.addContainerGap(
																				javax.swing.GroupLayout.DEFAULT_SIZE,
																				Short.MAX_VALUE))
														.addGroup(
																javax.swing.GroupLayout.Alignment.TRAILING,
																jPanel_forwardPathsLayout
																		.createSequentialGroup()
																		.addPreferredGap(
																				javax.swing.LayoutStyle.ComponentPlacement.RELATED,
																				64,
																				Short.MAX_VALUE)
																		.addComponent(
																				jLabel_pathDelta)
																		.addGap(51,
																				51,
																				51)))));
		jPanel_forwardPathsLayout
				.setVerticalGroup(jPanel_forwardPathsLayout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addComponent(jSeparator6)
						.addComponent(jSeparator2,
								javax.swing.GroupLayout.Alignment.TRAILING)
						.addGroup(
								jPanel_forwardPathsLayout
										.createSequentialGroup()
										.addGroup(
												jPanel_forwardPathsLayout
														.createParallelGroup(
																javax.swing.GroupLayout.Alignment.LEADING)
														.addGroup(
																jPanel_forwardPathsLayout
																		.createSequentialGroup()
																		.addGap(21,
																				21,
																				21)
																		.addComponent(
																				jLabel_forwardPaths)
																		.addGap(18,
																				18,
																				18)
																		.addComponent(
																				jScrollPane5,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				92,
																				javax.swing.GroupLayout.PREFERRED_SIZE))
														.addGroup(
																jPanel_forwardPathsLayout
																		.createSequentialGroup()
																		.addContainerGap()
																		.addComponent(
																				jLabel_pathGain,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				31,
																				javax.swing.GroupLayout.PREFERRED_SIZE)
																		.addGap(43,
																				43,
																				43)
																		.addComponent(
																				pathGain))
														.addGroup(
																jPanel_forwardPathsLayout
																		.createSequentialGroup()
																		.addContainerGap()
																		.addComponent(
																				jLabel_pathDelta,
																				javax.swing.GroupLayout.PREFERRED_SIZE,
																				30,
																				javax.swing.GroupLayout.PREFERRED_SIZE)
																		.addGap(44,
																				44,
																				44)
																		.addComponent(
																				pathDelta)))
										.addContainerGap(74, Short.MAX_VALUE)));

		mainTabbedPane.addTab("Forward Paths", jPanel_forwardPaths);

		jTappedPane_loops.addMouseListener(new java.awt.event.MouseAdapter() {
			public void mouseClicked(java.awt.event.MouseEvent evt) {
				LPMouseClicked(evt);
			}
		});
		mainTabbedPane.addTab("Loops", jTappedPane_loops);

		evaluateBtn.setFont(new java.awt.Font("SansSerif", 1, 18));
		evaluateBtn.setText("Evaluate");
		evaluateBtn.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				evaluateActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(
				jPanel4);
		jPanel4.setLayout(jPanel4Layout);
		jPanel4Layout
				.setHorizontalGroup(jPanel4Layout
						.createParallelGroup(
								javax.swing.GroupLayout.Alignment.LEADING)
						.addGroup(
								jPanel4Layout
										.createSequentialGroup()
										.addComponent(
												mainTabbedPane,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												1000,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addPreferredGap(
												javax.swing.LayoutStyle.ComponentPlacement.RELATED)
										.addComponent(
												evaluateBtn,
												javax.swing.GroupLayout.PREFERRED_SIZE,
												164,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addContainerGap(
												javax.swing.GroupLayout.DEFAULT_SIZE,
												Short.MAX_VALUE)));
		jPanel4Layout.setVerticalGroup(jPanel4Layout
				.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(
						javax.swing.GroupLayout.Alignment.TRAILING,
						jPanel4Layout
								.createSequentialGroup()
								.addContainerGap(
										javax.swing.GroupLayout.DEFAULT_SIZE,
										Short.MAX_VALUE)
								.addComponent(evaluateBtn,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										183,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addGap(24, 24, 24))
				.addGroup(
						jPanel4Layout
								.createSequentialGroup()
								.addGap(3, 3, 3)
								.addComponent(mainTabbedPane,
										javax.swing.GroupLayout.PREFERRED_SIZE,
										264,
										javax.swing.GroupLayout.PREFERRED_SIZE)
								.addContainerGap(
										javax.swing.GroupLayout.DEFAULT_SIZE,
										Short.MAX_VALUE)));

		gridBagConstraints = new java.awt.GridBagConstraints();
		gridBagConstraints.gridx = 0;
		gridBagConstraints.gridy = 1;
		gridBagConstraints.gridwidth = java.awt.GridBagConstraints.REMAINDER;
		gridBagConstraints.ipadx = 25;
		gridBagConstraints.ipady = -5;
		gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
		gridBagConstraints.insets = new java.awt.Insets(0, 0, 4, 0);
		getContentPane().add(jPanel4, gridBagConstraints);

		jMenu_edit.setText("Edit");
		jMenuBar1.add(jMenu_edit);

		setJMenuBar(jMenuBar1);

		pack();
	}// End init

	private void mainTabbedPaneMouseClicked(java.awt.event.MouseEvent evt) {
	}

	private void LPMouseClicked(java.awt.event.MouseEvent evt) {
	}

	private void mainTabbedPaneStateChanged(javax.swing.event.ChangeEvent evt) {
	}

	private void jList_forwardPathsValueChanged(
			javax.swing.event.ListSelectionEvent evt) {
		SFG sfg = getSFGInstance();
		listValueChanged(evt);

		if (!evt.getValueIsAdjusting()) {
			JList temp = (JList) evt.getSource();
			if (temp.getSelectedValue() != null) {
				int index = temp.getSelectedIndex();
				pathGain.setText(sfg.getForwardPathsGain().get(index) + "");
				pathDelta.setText(sfg.getForwardPathsDeltas().get(index) + "");
			}
		}
		repaint();
	}

	private HashMap<Integer, Integer> map1, map2;
	private Double[][] adjMat;

	private SFG getSFGInstance() {
		map1 = new HashMap<>();
		map2 = new HashMap<>();
		Collection<GraphElements.MyVertex> vertex = directedGraph.getVertices();
		Collection<GraphElements.MyEdge> edges = directedGraph.getEdges();
		adjMat = new Double[directedGraph.getVertexCount()][directedGraph
				.getVertexCount()];
		for (int i = 0; i < adjMat.length; i++) {
			for (int j = 0; j < adjMat[0].length; j++) {
				adjMat[i][j] = 0.0;
			}
		}
		ArrayList<Integer> toSort = new ArrayList<>();
		for (Iterator<GraphElements.MyVertex> it = vertex.iterator(); it
				.hasNext();) {
			GraphElements.MyVertex myVertex = it.next();
			int nodeN = Integer.parseInt(myVertex.getName());
			toSort.add(nodeN);
		}

		Collections.sort(toSort);

		for (int i = 0; i < toSort.size(); i++) {
			map1.put(toSort.get(i), i);
			map2.put(i, toSort.get(i));
		}
		for (Iterator<GraphElements.MyEdge> it = edges.iterator(); it.hasNext();) {
			GraphElements.MyEdge myEdge = it.next();
			int i = Integer.parseInt(directedGraph.getEndpoints(myEdge)
					.getFirst().toString());
			int j = Integer.parseInt(directedGraph.getEndpoints(myEdge)
					.getSecond().toString());
			adjMat[map1.get(i)][map1.get(j)] = myEdge.getWeight();
		}
		SFG sfg = new SFG();
		sfg.setNumberOfNode(directedGraph.getVertexCount());
		sfg.setNodesSegGain(adjMat);
		if(startNode != -1 && endNode != -1){
			sfg.start(startNode, endNode);
		}else if(startNode != -1){
			sfg.start(startNode, adjMat.length -1);
		}else if(endNode != -1){
			sfg.start(0, endNode);
		}else{
			sfg.start(0, adjMat.length -1);
		}
		
		return sfg;
	}

	private void evaluateActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
		if (directedGraph == null || directedGraph.getVertexCount() == 0)
			return;
		SFG sfg = getSFGInstance();
		String transferFunction = "" + sfg.getOvalAllTF();
		String delta = "" + sfg.getMainDelta();
		jLabel_tansferFunction.setText(transferFunction);
		mainDelta.setText(delta);
		showForwardPaths(sfg);
		showLoops(sfg);
		pathGain.setText("");
		pathDelta.setText("");
	}

	

	public void setGraph() {
		directedGraph = new DirectedSparseGraph<GraphElements.MyVertex, GraphElements.MyEdge>();

		Layout<GraphElements.MyVertex, GraphElements.MyEdge> layout = new StaticLayout<GraphElements.MyVertex, GraphElements.MyEdge>(
				directedGraph);
		layout.setSize(new Dimension(300, 300));
		visualizationViewer = new VisualizationViewer<GraphElements.MyVertex, GraphElements.MyEdge>(
				layout);
		visualizationViewer.setPreferredSize(new Dimension(350, 350));

		// Show vertex and edge labels
		visualizationViewer.getRenderContext().setVertexLabelTransformer(
				new ToStringLabeller<GraphElements.MyVertex>());
		visualizationViewer.getRenderContext().setEdgeLabelTransformer(
				new ToStringLabeller<GraphElements.MyEdge>());

		visualizationViewer.getRenderContext().setVertexFillPaintTransformer(
				new VertexPaintTransformer(paths));
		visualizationViewer.getRenderContext().setEdgeDrawPaintTransformer(
				new EdgePaintTransformer(paths));

		// Create a graph mouse and add it to the visualization viewer
		EditingModalGraphMouse<GraphElements.MyVertex, GraphElements.MyEdge> gm = new EditingModalGraphMouse<GraphElements.MyVertex, GraphElements.MyEdge>(
				visualizationViewer.getRenderContext(),
				GraphElements.MyVertexFactory.getInstance(),
				GraphElements.MyEdgeFactory.getInstance());

		// Set some defaults for the Edges...
		GraphElements.MyEdgeFactory.setDefaultWeight(1.0);

		// Trying out our new popup menu mouse plugin...
		PopupVertexEdgeMenu<?, ?> myPlugin = new PopupVertexEdgeMenu<Object, Object>();

		// Add some popup menus for the edges and vertices to our mouse plugin.
		JPopupMenu edgeMenu = new MyMouseMenus.EdgeMenu(this);
		JPopupMenu vertexMenu = new MyMouseMenus.VertexMenu();
		myPlugin.setEdgePopup(edgeMenu);
		myPlugin.setVertexPopup(vertexMenu);
		gm.remove(gm.getPopupEditingPlugin()); // Removes the existing popup
												// editing plugin

		gm.add(myPlugin); // Add our new plugin to the mouse

		visualizationViewer.setGraphMouse(gm);

		// JFrame frame = new JFrame("Editing and Mouse Menu Demo");

		jPanel2.setLayout(new BorderLayout());
		jPanel2.add(visualizationViewer, BorderLayout.CENTER);
		// Let's add a menu for changing mouse modes
		JMenuBar menuBar = new JMenuBar();
		JMenu modeMenu = gm.getModeMenu();
		modeMenu.setText("Mouse Mode");
		modeMenu.setIcon(null); // I'm using this in a main menu
		modeMenu.setPreferredSize(new Dimension(150, 20)); // Change the size so
															// I can see the
															// text

		menuBar.add(modeMenu);
		menuBar.add(jMenu_edit);
		JMenuItem item = new JMenuItem("Select Start node");
        item.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
            	String name = JOptionPane.showInputDialog(GUI.getFrames()[0], "Enter the start node number :", null);
            	startNode = Integer.parseInt(name);
            	if(startNode < 0 || startNode >= directedGraph.getVertexCount())
            		JOptionPane.showMessageDialog(null, "Error!\nThe node number not found!!", "Error",
                        JOptionPane.ERROR_MESSAGE);
            }
	    });
        JMenuItem item2 = new JMenuItem("Select End node");
        item2.addActionListener(new ActionListener(){
            @Override
            public void actionPerformed(ActionEvent e) {
            	String name = JOptionPane.showInputDialog(GUI.getFrames()[0], "Enter the end node number :", null);
            	endNode = Integer.parseInt(name);
            	if(endNode < 0 || endNode >= directedGraph.getVertexCount())
            		JOptionPane.showMessageDialog(null, "Error!\nThe node number not found!!", "Error",
                        JOptionPane.ERROR_MESSAGE);
            }
        });
	    jMenu_edit.setPreferredSize(new Dimension(150, 20));
	    jMenu_edit.add(item);
	    jMenu_edit.addSeparator();
	    jMenu_edit.add(item2);
		setJMenuBar(menuBar);
		gm.setMode(ModalGraphMouse.Mode.EDITING); // Start off in editing mode

	}

	
    /**
     * 
     * @author 8.1
     *
     */
	private static class VertexPaintTransformer implements
			Transformer<GraphElements.MyVertex, Paint> {

		private final ArrayList<Integer> selectedPath;

		VertexPaintTransformer(ArrayList<Integer> selectedPath) {
			super();
			if (selectedPath == null)
				throw new IllegalArgumentException(
						"selectedPath instance must be non-null");
			this.selectedPath = selectedPath;
		}

		@Override
		public Paint transform(GraphElements.MyVertex v) {
			Color p = null;

			if (selectedPath.contains(Integer.parseInt(v.getName())))
				p = Color.BLUE;
			else
				p = Color.RED;
			return p;
		}
	}

	public static Integer tryParse(String text) {
		try {
			return new Integer(text);
		} catch (NumberFormatException e) {
			return null;
		}
	}
    /**
     * 
     * @author 8.1
     *
     */
	private class EdgePaintTransformer implements
			Transformer<GraphElements.MyEdge, Paint> {

		private final ArrayList<Integer> selectedPath;

		EdgePaintTransformer(ArrayList<Integer> selectedPath) {
			super();
			if (selectedPath == null)
				throw new IllegalArgumentException(
						"selectedPath instance must be non-null");
			this.selectedPath = selectedPath;
		}

		@Override
		public Paint transform(GraphElements.MyEdge e) {

			Color p = null;
			p = Color.BLACK;

			for (int i = 0; i < selectedPath.size() - 1; i++) {
				if (Integer.parseInt(directedGraph.getEndpoints(e).getFirst()
						.toString()) == selectedPath.get(i)
						&& Integer.parseInt(directedGraph.getEndpoints(e)
								.getSecond().toString()) == selectedPath
								.get(i + 1))
					p = Color.BLUE;

			}
			return p;
		}
	}

	/**
	 * @author 8.1
	 * @param <V>
	 */
	public class MyVertexDrawPaintFunction<V> implements Transformer<V, Paint> {

		public Paint transform(V v) {
			return Color.black;
		}
	}

	private void showForwardPaths(SFG sfg) {
		forward = new DefaultListModel();

		ArrayList<ArrayList<Integer>> forwards = sfg.getForwardPaths();

		for (int i = 0; i < forwards.size(); i++) {
			String s = "";

			for (int j = 0; j < forwards.get(i).size(); j++) {
				if (j == forwards.get(i).size() - 1)
					s += forwards.get(i).get(j);
				else
					s += forwards.get(i).get(j) + "-";
			}

			forward.addElement(s);
		}
		jList_forwardPaths.setModel(forward);
	}

	private void listValueChanged(javax.swing.event.ListSelectionEvent evt) {
		for (int i = 0; i < paths.size(); i++) {
			paths.remove(i);
			i--;
		}
		if (!evt.getValueIsAdjusting()) {
			JList temp = (JList) evt.getSource();
			if (temp.getSelectedValue() != null) {
				String s = temp.getSelectedValue().toString();
				for (int i = 0; i < s.length(); i++) {
					if (tryParse(s.charAt(i) + "") != null)
						paths.add(tryParse(s.charAt(i) + ""));
				}
			}
		}
		repaint();
	}

	private void showLoops(SFG sfg) {

		for (int i = 0; i < jTappedPane_loops.getTabCount(); i++) {
			jTappedPane_loops.removeTabAt(i);
			i--;
		}

		ArrayList<Integer[]> unTouchedLoops = sfg.getNonTouchingLoops();
		ArrayList<ArrayList<Integer>> allLoops = sfg.getLoops();

		ArrayList<JPanel> panels = new ArrayList<JPanel>();
		ArrayList<JList> lists = new ArrayList<JList>();
		ArrayList<DefaultListModel> models = new ArrayList<DefaultListModel>();
		ArrayList<JScrollPane> scrolls = new ArrayList<JScrollPane>();

		for (int i = 0; i < 2; i++) {
			panels.add(new JPanel());
			lists.add(new JList());
			models.add(new DefaultListModel());
			lists.get(i).setModel(models.get(i));

			scrolls.add(new JScrollPane(lists.get(i)));
			scrolls.get(i).setPreferredSize(new Dimension(500, 100));
			panels.get(i).add(scrolls.get(i));
			if (i == 0)
				jTappedPane_loops.addTab("All Loops", panels.get(i));
			if (i == 1)
				jTappedPane_loops.addTab("unTouched Loops", panels.get(i));
		}
		DefaultListModel unTouchedModel = models.get(1);
		for (Integer[] arr : unTouchedLoops) {
			String str = "";
			for (int j = 0, k = 0; j < arr.length; j++) {
				ArrayList<Integer> loop = allLoops.get(arr[j]);
				for (int node : loop) {
					str += node;
					if (k != loop.size() - 1)
						str += " - ";
					k++;
				}
				if (j != arr.length - 1)
					str += " && ";
			}
			unTouchedModel.addElement(str);
		}
		DefaultListModel loopsModel = models.get(0);
		for (int i = 0; i < allLoops.size(); i++) {
			String str = "";
			for (int j = 0; j < allLoops.get(i).size(); j++) {
				str += allLoops.get(i).get(j) + " - ";
			}
			loopsModel.addElement(str);
		}
	}
	/**
	 * @param args
	 *            the command line arguments
	 */
	public static void main(String args[]) {

		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager
					.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
		} catch (InstantiationException ex) {
		} catch (IllegalAccessException ex) {
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
		}

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new GUI().setVisible(true);
			}
		});
	}
}
